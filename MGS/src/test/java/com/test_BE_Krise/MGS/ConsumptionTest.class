// Source code is decompiled from a .class file using FernFlower decompiler.
package com.test_BE_Krise.MGS;

import com.test_BE_Krise.MGS.entity.Consumption;
import com.test_BE_Krise.MGS.repository.ConsumptionRepository;
import com.test_BE_Krise.MGS.service.ConsumptionService;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

public class ConsumptionTest {
   @InjectMocks
   private ConsumptionService consumptionService;
   @Mock
   private ConsumptionRepository consumptionRepository;

   public ConsumptionTest() {
   }

   @BeforeEach
   public void setUp() {
      MockitoAnnotations.openMocks(this);
   }

   @Test
   public void testCreateConsumption_Success() {
      Consumption consumption = new Consumption((Long)null, 30000L, "Snack Pagi", OffsetDateTime.now());
      Consumption savedConsumption = new Consumption(1L, 30000L, "Snack Pagi", OffsetDateTime.now());
      Mockito.when((Consumption)this.consumptionRepository.save(consumption)).thenReturn(savedConsumption);
      Consumption result = this.consumptionService.createConsumption(consumption);
      Assertions.assertEquals(savedConsumption.getId(), result.getId());
      Assertions.assertEquals(savedConsumption.getMaxPrice(), result.getMaxPrice());
      Assertions.assertEquals(savedConsumption.getName(), result.getName());
      ((ConsumptionRepository)Mockito.verify(this.consumptionRepository, Mockito.times(1))).save(consumption);
   }

   @Test
   public void testGetAllConsumptions_Success() {
      List<Consumption> consumptions = Arrays.asList(new Consumption(1L, 20000L, "Snack Pagi", OffsetDateTime.now()), new Consumption(2L, 30000L, "Makan Siang", OffsetDateTime.now()), new Consumption(3L, 15000L, "Snack Sore", OffsetDateTime.now()));
      Mockito.when(this.consumptionRepository.findAll()).thenReturn(consumptions);
      List<Consumption> result = this.consumptionService.getAllConsumptions();
      Assertions.assertEquals(3, result.size());
      Assertions.assertEquals("Snack Pagi", ((Consumption)result.get(0)).getName());
      Assertions.assertEquals("Makan Siang", ((Consumption)result.get(1)).getName());
      Assertions.assertEquals("Snack Sore", ((Consumption)result.get(2)).getName());
      ((ConsumptionRepository)Mockito.verify(this.consumptionRepository, Mockito.times(1))).findAll();
   }
}
